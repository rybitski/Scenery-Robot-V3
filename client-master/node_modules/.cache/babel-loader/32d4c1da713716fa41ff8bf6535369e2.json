{"ast":null,"code":"import _classCallCheck from \"/Users/josephkaraki/middleman/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/josephkaraki/middleman/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/josephkaraki/middleman/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/josephkaraki/middleman/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/josephkaraki/middleman/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/josephkaraki/middleman/client/src/App/pages/List.js\";\nimport React, { Component } from 'react';\nimport Script from 'react-load-script';\nimport Gamepad from 'react-gamepad';\n\nvar List =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(List, _Component);\n\n  // Initialize the state\n  function List(props) {\n    var _this;\n\n    _classCallCheck(this, List);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(List).call(this, props));\n\n    _this.sendData = function () {\n      fetch('/api/xsend', {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          data: \"50,50\"\n        })\n      });\n    };\n\n    _this.getList = function () {\n      fetch('/api/getList').then(function (res) {\n        return res.json();\n      }).then(function (list) {\n        return _this.setState({\n          list: list\n        });\n      });\n    };\n\n    _this.state = {\n      list: []\n    };\n    return _this;\n  } // Fetch the list on first mount\n\n\n  _createClass(List, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.sendData();\n    }\n  }, {\n    key: \"connectHandler\",\n    value: function connectHandler(gamepadIndex) {\n      console.log(\"Gamepad \".concat(gamepadIndex, \" connected !\"));\n    }\n  }, {\n    key: \"disconnectHandler\",\n    value: function disconnectHandler(gamepadIndex) {\n      console.log(\"Gamepad \".concat(gamepadIndex, \" disconnected !\"));\n    }\n  }, {\n    key: \"buttonChangeHandler\",\n    value: function buttonChangeHandler(buttonName, down) {\n      console.log(buttonName, down);\n    }\n  }, {\n    key: \"axisChangeHandler\",\n    value: function axisChangeHandler(axisName, value, previousValue) {\n      console.log(axisName, value);\n    }\n  }, {\n    key: \"buttonDownHandler\",\n    value: function buttonDownHandler(buttonName) {\n      console.log(buttonName, 'down');\n    }\n  }, {\n    key: \"buttonUpHandler\",\n    value: function buttonUpHandler(buttonName) {\n      console.log(buttonName, 'up');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var list = this.state.list;\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(Gamepad, {\n        onConnect: this.connectHandler,\n        onDisconnect: this.disconnectHandler,\n        onButtonChange: this.buttonChangeHandler,\n        onAxisChange: this.axisChangeHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \"List of Items\"));\n    }\n  }, {\n    key: \"handleScriptCreate\",\n    value: function handleScriptCreate() {\n      this.setState({\n        scriptLoaded: false\n      });\n    }\n  }, {\n    key: \"handleScriptError\",\n    value: function handleScriptError() {\n      this.setState({\n        scriptError: true\n      });\n    }\n  }, {\n    key: \"handleScriptLoad\",\n    value: function handleScriptLoad() {\n      this.setState({\n        scriptLoaded: true\n      });\n    }\n  }]);\n\n  return List;\n}(Component);\n\nexport default List;","map":{"version":3,"sources":["/Users/josephkaraki/middleman/client/src/App/pages/List.js"],"names":["React","Component","Script","Gamepad","List","props","sendData","fetch","method","headers","body","JSON","stringify","data","getList","then","res","json","list","setState","state","gamepadIndex","console","log","buttonName","down","axisName","value","previousValue","connectHandler","disconnectHandler","buttonChangeHandler","axisChangeHandler","scriptLoaded","scriptError"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,OAAP,MAAoB,eAApB;;IAEMC,I;;;;;AACJ;AACA,gBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AAChB,8EAAMA,KAAN;;AADgB,UAapBC,QAboB,GAaT,YAAK;AACZC,MAAAA,KAAK,CAAC,YAAD,EAAe;AAChBC,QAAAA,MAAM,EAAE,MADQ;AAEhBC,QAAAA,OAAO,EAAE;AAAC,0BAAgB;AAAjB,SAFO;AAGhBC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,UAAAA,IAAI,EAAG;AADU,SAAf;AAHU,OAAf,CAAL;AAOH,KArBmB;;AAAA,UAwBlBC,OAxBkB,GAwBR,YAAM;AACdP,MAAAA,KAAK,CAAC,cAAD,CAAL,CACCQ,IADD,CACM,UAAAC,GAAG;AAAA,eAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,OADT,EAECF,IAFD,CAEM,UAAAG,IAAI;AAAA,eAAI,MAAKC,QAAL,CAAc;AAAED,UAAAA,IAAI,EAAJA;AAAF,SAAd,CAAJ;AAAA,OAFV;AAGD,KA5BiB;;AAEhB,UAAKE,KAAL,GAAa;AACXF,MAAAA,IAAI,EAAE;AADK,KAAb;AAFgB;AAKjB,G,CAED;;;;;wCACoB;AAClB,WAAKZ,QAAL;AAED;;;mCAkBce,Y,EAAc;AAC3BC,MAAAA,OAAO,CAACC,GAAR,mBAAuBF,YAAvB;AACD;;;sCAEiBA,Y,EAAc;AAC9BC,MAAAA,OAAO,CAACC,GAAR,mBAAuBF,YAAvB;AACD;;;wCAEmBG,U,EAAYC,I,EAAM;AACpCH,MAAAA,OAAO,CAACC,GAAR,CAAYC,UAAZ,EAAwBC,IAAxB;AACD;;;sCAEiBC,Q,EAAUC,K,EAAOC,a,EAAe;AAChDN,MAAAA,OAAO,CAACC,GAAR,CAAYG,QAAZ,EAAsBC,KAAtB;AACD;;;sCAEiBH,U,EAAY;AAC5BF,MAAAA,OAAO,CAACC,GAAR,CAAYC,UAAZ,EAAwB,MAAxB;AACD;;;oCAEeA,U,EAAY;AAC1BF,MAAAA,OAAO,CAACC,GAAR,CAAYC,UAAZ,EAAwB,IAAxB;AACD;;;6BACQ;AAAA,UACCN,IADD,GACU,KAAKE,KADf,CACCF,IADD;AAGP,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEA,oBAAC,OAAD;AACE,QAAA,SAAS,EAAE,KAAKW,cADlB;AAEE,QAAA,YAAY,EAAE,KAAKC,iBAFrB;AAIE,QAAA,cAAc,EAAE,KAAKC,mBAJvB;AAKE,QAAA,YAAY,EAAE,KAAKC,iBALrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFA,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBATF,CADF;AAeD;;;yCACoB;AACnB,WAAKb,QAAL,CAAc;AAAEc,QAAAA,YAAY,EAAE;AAAhB,OAAd;AACD;;;wCAEmB;AAClB,WAAKd,QAAL,CAAc;AAAEe,QAAAA,WAAW,EAAE;AAAf,OAAd;AACD;;;uCAEkB;AACjB,WAAKf,QAAL,CAAc;AAAEc,QAAAA,YAAY,EAAE;AAAhB,OAAd;AACD;;;;EAnFgBhC,S;;AAsFnB,eAAeG,IAAf","sourcesContent":["import React, { Component } from 'react';\nimport Script from 'react-load-script'\nimport Gamepad from 'react-gamepad'\n\nclass List extends Component {\n  // Initialize the state\n  constructor(props){\n    super(props);\n    this.state = {\n      list: []\n    }\n  }\n\n  // Fetch the list on first mount\n  componentDidMount() {\n    this.sendData();\n    \n  }\n  \nsendData = () =>{\n    fetch('/api/xsend', {  \n        method: 'post',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({\n            data : \"50,50\",\n            }),\n        }) \n};\n  \n  // Retrieves the list of items from the Express app\n  getList = () => {\n    fetch('/api/getList')\n    .then(res => res.json())\n    .then(list => this.setState({ list }))\n  }\n  connectHandler(gamepadIndex) {\n    console.log(`Gamepad ${gamepadIndex} connected !`)\n  }\n \n  disconnectHandler(gamepadIndex) {\n    console.log(`Gamepad ${gamepadIndex} disconnected !`)\n  }\n \n  buttonChangeHandler(buttonName, down) {\n    console.log(buttonName, down)\n  }\n \n  axisChangeHandler(axisName, value, previousValue) {\n    console.log(axisName, value)\n  }\n \n  buttonDownHandler(buttonName) {\n    console.log(buttonName, 'down')\n  }\n \n  buttonUpHandler(buttonName) {\n    console.log(buttonName, 'up')\n  }\n  render() {\n    const { list } = this.state;\n\n    return (\n      <div className=\"App\">\n      \n      <Gamepad\n        onConnect={this.connectHandler}\n        onDisconnect={this.disconnectHandler}\n \n        onButtonChange={this.buttonChangeHandler}\n        onAxisChange={this.axisChangeHandler}\n      />\n        <h1>List of Items</h1>\n        \n      \n      </div>\n    );\n  }\n  handleScriptCreate() {\n    this.setState({ scriptLoaded: false })\n  }\n   \n  handleScriptError() {\n    this.setState({ scriptError: true })\n  }\n   \n  handleScriptLoad() {\n    this.setState({ scriptLoaded: true })\n  }\n}\n\nexport default List;"]},"metadata":{},"sourceType":"module"}