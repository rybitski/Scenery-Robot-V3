{"ast":null,"code":"import _classCallCheck from \"/Users/josephkaraki/middleman/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/josephkaraki/middleman/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/josephkaraki/middleman/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/josephkaraki/middleman/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/josephkaraki/middleman/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/josephkaraki/middleman/client/src/App/pages/List.js\";\nimport React, { Component } from 'react';\nimport Script from 'react-load-script';\nimport Gamepad from 'react-gamepad';\n\nvar List =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(List, _Component);\n\n  // Initialize the state\n  function List(props) {\n    var _this;\n\n    _classCallCheck(this, List);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(List).call(this, props));\n\n    _this.sendData = function () {\n      fetch('/api/xsend', {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          data: \"50,50\"\n        })\n      });\n    };\n\n    _this.getList = function () {\n      fetch('/api/getList').then(function (res) {\n        return res.json();\n      }).then(function (list) {\n        return _this.setState({\n          list: list\n        });\n      });\n    };\n\n    _this.state = {\n      out_data: [0, 0, 0, 0, 0, 0, 0, 0],\n      list: []\n    };\n    return _this;\n  }\n\n  _createClass(List, [{\n    key: \"connectHandler\",\n    value: function connectHandler(gamepadIndex) {\n      console.log(\"Gamepad \".concat(gamepadIndex, \" connected !\"));\n    }\n  }, {\n    key: \"disconnectHandler\",\n    value: function disconnectHandler(gamepadIndex) {\n      console.log(\"Gamepad \".concat(gamepadIndex, \" disconnected !\"));\n    }\n  }, {\n    key: \"axisChangeHandler\",\n    value: function axisChangeHandler(axisName, value, previousValue) {\n      console.log(axisName, value);\n      if (axisName == RightStickX) this.setState({\n        out_data: update(this.state.out_data, {\n          0: value\n        })\n      });\n      if (axisName == RightStickY) this.setState({\n        out_data: update(this.state.out_data, {\n          1: value\n        })\n      });\n      if (axisName == LeftStickY) this.setState({\n        out_data: update(this.state.out_data, {\n          2: value\n        })\n      });\n    }\n  }, {\n    key: \"onRT\",\n    value: function onRT() {\n      console.log(\"RT\");\n      this.setState({\n        out_data: update(this.state.out_data, {\n          3: value\n        })\n      });\n    }\n  }, {\n    key: \"onButtonDown\",\n    value: function onButtonDown(buttonName) {\n      console.log(buttonName);\n      if (axisName == DPadUp) this.setState({\n        out_data: update(this.state.out_data, {\n          4: 1\n        })\n      });\n      if (axisName == DPadRight) this.setState({\n        out_data: update(this.state.out_data, {\n          4: 2\n        })\n      });\n      if (axisName == DPadDown) this.setState({\n        out_data: update(this.state.out_data, {\n          4: 3\n        })\n      });\n      if (axisName == DPadLeft) this.setState({\n        out_data: update(this.state.out_data, {\n          4: 4\n        })\n      });\n    }\n  }, {\n    key: \"onA\",\n    value: function onA() {\n      console.log(\"A\");\n      this.setState({\n        out_data: update(this.state.out_data, {\n          5: 1\n        })\n      });\n    }\n  }, {\n    key: \"onLB\",\n    value: function onLB() {\n      console.log(\"LB\");\n      this.setState({\n        out_data: update(this.state.out_data, {\n          6: 1\n        })\n      });\n    }\n  }, {\n    key: \"onRB\",\n    value: function onRB() {\n      console.log(\"RB\");\n      this.setState({\n        out_data: update(this.state.out_data, {\n          7: 1\n        })\n      });\n    } // Fetch the list on first mount\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.sendData(); //this.reportOnGamepad();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var list = this.state.list;\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(Gamepad, {\n        onConnect: this.connectHandler,\n        onDisconnect: this.disconnectHandler,\n        onA: this.onA,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      })), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"List of Items\"), list.length ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, list.map(function (item) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }, item);\n      })) : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, \"No List Items Found\"), this.state.out_data));\n    }\n  }]);\n\n  return List;\n}(Component);\n\nexport default List;","map":{"version":3,"sources":["/Users/josephkaraki/middleman/client/src/App/pages/List.js"],"names":["React","Component","Script","Gamepad","List","props","sendData","fetch","method","headers","body","JSON","stringify","data","getList","then","res","json","list","setState","state","out_data","gamepadIndex","console","log","axisName","value","previousValue","RightStickX","update","RightStickY","LeftStickY","buttonName","DPadUp","DPadRight","DPadDown","DPadLeft","connectHandler","disconnectHandler","onA","length","map","item"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Script from 'react-load-script'\nimport Gamepad from 'react-gamepad'\n\nclass List extends Component {\n  // Initialize the state\n  constructor(props){\n    super(props);\n    this.state = {\n        out_data:[0, 0, 0, 0, 0, 0, 0, 0],\n       \n      list: []\n    }\n  }\n    connectHandler(gamepadIndex) {\n    console.log(`Gamepad ${gamepadIndex} connected !`)\n    }\n    \n    disconnectHandler(gamepadIndex) {\n    console.log(`Gamepad ${gamepadIndex} disconnected !`)\n    }\n   \n    \n    axisChangeHandler(axisName, value, previousValue) {\n        console.log(axisName, value)\n        if (axisName==RightStickX)\n            this.setState({\n                out_data: update(this.state.out_data, {0: value})\n            })\n        if (axisName==RightStickY)\n            this.setState({\n                out_data: update(this.state.out_data, {1: value})\n            })\n        if (axisName==LeftStickY)\n            this.setState({\n                out_data: update(this.state.out_data, {2: value})\n            })\n      \n    }\n    onRT(){\n        console.log(\"RT\")\n        this.setState({\n            out_data: update(this.state.out_data, {3: value})\n        })\n    }  \n    onButtonDown(buttonName) {\n        console.log(buttonName)\n        if (axisName==DPadUp)\n            this.setState({\n                out_data: update(this.state.out_data, {4: 1})\n            })\n        if (axisName==DPadRight)\n            this.setState({\n                out_data: update(this.state.out_data, {4: 2})\n            })\n        if (axisName==DPadDown)\n            this.setState({\n                out_data: update(this.state.out_data, {4: 3})\n            })\n        if (axisName==DPadLeft)\n            this.setState({\n                out_data: update(this.state.out_data, {4: 4})\n            })\n    }\n\n    onA(){\n    console.log(\"A\")\n    this.setState({\n        out_data: update(this.state.out_data, {5: 1})\n    })\n    }\n    onLB(){\n        console.log(\"LB\")\n        this.setState({\n            out_data: update(this.state.out_data, {6: 1})\n        })\n     }\n     onRB(){\n        console.log(\"RB\")\n        this.setState({\n            out_data: update(this.state.out_data, {7: 1})\n        })\n    \n     }\n  // Fetch the list on first mount\n  componentDidMount() {\n    this.sendData();\n    //this.reportOnGamepad();\n    \n  }\n  \nsendData = () =>{\n    fetch('/api/xsend', {  \n        method: 'post',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({\n            data : \"50,50\",\n            }),\n        }) \n};\n  \n  // Retrieves the list of items from the Express app\n  getList = () => {\n    fetch('/api/getList')\n    .then(res => res.json())\n    .then(list => this.setState({ list }))\n  }\n\n\n  render() {\n    const { list } = this.state;\n\n    return (\n      <div className=\"App\">\n      <Gamepad\n        onConnect={this.connectHandler}\n        onDisconnect={this.disconnectHandler}\n \n        onA={this.onA}\n      >\n     <p></p>\n    </Gamepad>\n\n        <h1>List of Items</h1>\n        {/* Check to see if any items are found*/}\n        {list.length ? (\n          <div>\n            {/* Render the list of items */}\n            {list.map((item) => {\n              return(\n                <div>\n                  {item}\n                </div>\n              );\n            })}\n          </div>\n        ) : (\n          <div>\n            <h2>No List Items Found</h2>\n            {this.state.out_data}\n          </div>\n        )\n      }\n      </div>\n    );\n  }\n  \n}\n\nexport default List;"]},"metadata":{},"sourceType":"module"}